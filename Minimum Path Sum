class Solution {
public:
    int dp[210][210];
    int helper(int i, int j, int n, int m, vector<vector<int>>& grid){
        if(i >= n or j >= m) return 1e9+7;
        if(i == n-1 and j == m-1) return grid[n-1][m-1];
        if(dp[i][j] != -1) return dp[i][j];
        return dp[i][j] = grid[i][j] + min(helper(i+1,j,n,m,grid),helper(i,j+1,n,m,grid));
    }
    int minPathSum(vector<vector<int>>& grid) {
        for(int i = 0; i < 210; i++)
            for(int j = 0; j < 210; j++)
                dp[i][j] = -1;
        int n = grid.size(), m = grid[0].size();
        int ans = helper(0,0,n,m,grid);
        return ans;
     }
};
